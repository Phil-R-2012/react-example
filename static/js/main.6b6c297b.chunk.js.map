{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","squareClassNames","board","count","row","j","push","renderSquare","createBoard","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","showMovesListInReverse","winningSquares","lines","length","a","b","c","slice","calculateWinner","setState","concat","step","moveCoordinates","moves","map","move","movePosition","x","buttonClass","desc","key","jumpTo","reverse","buildMovesList","current","winner","movesListToggle","toggleMovesListOrder","status","console","log","handleClick","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAWD,EAAMC,UAAWC,QAASF,EAAME,SAC9CF,EAAMG,O,IAKbC,E,2KACWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,IAClCJ,UAAWK,KAAKN,MAAMQ,iBAAiBH,O,oCAQ/C,IAFA,IAAII,EAAQ,GACRC,EAAQ,EACJL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAEvB,IADA,IAAIM,EAAM,GACFC,EAAI,EAAGA,EAAI,EAAGA,IAClBD,EAAIE,KAAKP,KAAKQ,aAAaJ,MAE/BD,EAAMI,KAAK,yBAAKZ,UAAU,aAAaU,IAE3C,OAAOF,I,+BAIP,OACI,6BAAMH,KAAKS,mB,GA1BHC,IAAMC,WAqDpBC,E,kDACF,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,MAAQ,CACTC,QAAS,CAAC,CACNb,QAASc,MAAM,GAAGC,KAAK,QAE3BC,WAAY,EACZC,SAAS,EACTC,wBAAwB,EACxBC,eAAgB,GAChBlB,iBAAkB,IAVP,E,4DAcHD,GAWZ,IAVA,IAAMoB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEHtB,EAAI,EAAGA,EAAIsB,EAAMC,OAAQvB,IAAK,CAAC,IAAD,cAChBsB,EAAMtB,GADU,GAC3BwB,EAD2B,KACxBC,EADwB,KACrBC,EADqB,KAElC,GAAGxB,EAAQsB,IAAMtB,EAAQsB,KAAOtB,EAAQuB,IAAMvB,EAAQsB,KAAOtB,EAAQwB,GAGjE,OADAzB,KAAKa,MAAMO,eAAiB,CAACG,EAAGC,EAAGC,GAC5BxB,EAAQsB,GAGvB,OAAO,O,kCAGCxB,GACR,IAAMe,EAAUd,KAAKa,MAAMC,QAAQY,MAAM,EAAG1B,KAAKa,MAAMI,WAAa,GAE9DhB,EADUa,EAAQA,EAAQQ,OAAS,GACjBrB,QAAQyB,QAC7B1B,KAAK2B,gBAAgB1B,IAAYA,EAAQF,KAG5CE,EAAQF,GAAKC,KAAKa,MAAMK,QAAU,IAAM,IACxClB,KAAK4B,SAAS,CACVd,QAASA,EAAQe,OAAO,CAAC,CACrB5B,QAASA,KAEbgB,WAAYH,EAAQQ,OACpBJ,SAAUlB,KAAKa,MAAMK,a,6CAKzBlB,KAAK4B,SAAS,CACVT,wBAAyBnB,KAAKa,MAAMM,2B,6BAIrCW,GACH9B,KAAK4B,SAAS,CACVX,WAAYa,EACZZ,QAAUY,EAAO,IAAO,M,uCAId,IAAD,OACPC,EAAkB,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SAC3FjB,EAAUd,KAAKa,MAAMC,QACvBkB,EAAQ,GAuBZ,OAtBAlB,EAAQmB,KAAI,SAACH,EAAMI,GACf,IAAIC,EAAe,GACnB,GAAGD,EACC,IAAI,IAAIE,EAAI,EAAGA,EAAItB,EAAQoB,GAAMjC,QAAQqB,OAAQc,IAC7C,GAAGtB,EAAQoB,GAAMjC,QAAQmC,IAAMtB,EAAQoB,EAAO,GAAGjC,QAAQmC,GAAI,CAEzDD,EAAeJ,EAAgBK,GAC/B,MAIZ,IAAIC,EAAc,GACf,EAAKxB,MAAMI,YAAciB,IACxBG,EAAc,QAElB,IAAMC,EAAOJ,EAAO,eAAiBA,EAAO,IAAMC,EAAe,mBACjEH,EAAMzB,KACF,wBAAIgC,IAAKL,GACL,4BAAQvC,UAAW0C,EAAazC,QAAS,kBAAM,EAAK4C,OAAON,KAAQI,QAIxEtC,KAAKa,MAAMM,uBAAyBa,EAAMS,UAAYT,I,+BAGvD,IAAD,OA8BCA,EAAQhC,KAAK0C,iBAEbC,EADU3C,KAAKa,MAAMC,QACHd,KAAKa,MAAMI,YAC7B2B,EAAS5C,KAAK2B,gBAAgBgB,EAAQ1C,SACtC4C,EAAkB,4BAAQjD,QAAS,kBAAM,EAAKkD,yBAA5B,2BACxB9C,KAAKa,MAAMX,iBAAmB,CAAC,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,SAAU,UAC/G,IAII6C,EAJE7C,EAAmBF,KAAKa,MAAMX,iBAKpC,GAHA8C,QAAQC,IAAIjD,KAAKa,MAAMI,YAGpB2B,EAAQ,CACPG,EAAS,WAAaH,EAEtB,IAAI,IAAI7C,EAAI,EAAGA,EAAI,EAAGA,IAClBG,EAAiBF,KAAKa,MAAMO,eAAerB,IAAM,0BAGrDgD,EAD+B,GAAzB/C,KAAKa,MAAMI,WACR,OAGA,iBAAmBjB,KAAKa,MAAMK,QAAU,IAAM,KAE3D,OACI,yBAAKvB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIG,QAAS0C,EAAQ1C,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAKmD,YAAYnD,IACjCG,iBAAkBA,KAG1B,yBAAKP,UAAU,aACX,6BAAMoD,GACN,4BAAKf,IAET,yBAAKrC,UAAU,mBACVkD,Q,GAnKFnC,IAAMC,WA4KzBwC,IAASC,OACL,kBAACxC,EAAD,MACAyC,SAASC,eAAe,W","file":"static/js/main.6b6c297b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className={props.className} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n                className={this.props.squareClassNames[i]}\r\n                />\r\n        );\r\n    }\r\n\r\n    createBoard() {\r\n        let board = [];\r\n        let count = 0;\r\n        for(let i = 0; i < 3; i++) {\r\n            let row = [];\r\n            for(let j = 0; j < 3; j++) {\r\n                row.push(this.renderSquare(count++));\r\n            }\r\n            board.push(<div className=\"board-row\">{row}</div>);\r\n        }\r\n        return board;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>{this.createBoard()}</div>\r\n        );\r\n    }\r\n\r\n    //render() {\r\n    //    return (\r\n    //        <div>\r\n    //            <div className=\"board-row\">\r\n    //                {this.renderSquare(0)}\r\n    //                {this.renderSquare(1)}\r\n    //                {this.renderSquare(2)}\r\n    //            </div>\r\n    //            <div className=\"board-row\">\r\n    //                {this.renderSquare(3)}\r\n    //                {this.renderSquare(4)}\r\n    //                {this.renderSquare(5)}\r\n    //            </div>\r\n    //            <div className=\"board-row\">\r\n    //                {this.renderSquare(6)}\r\n    //                {this.renderSquare(7)}\r\n    //                {this.renderSquare(8)}\r\n    //            </div>\r\n    //        </div>\r\n    //    );\r\n    //}\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            showMovesListInReverse: false,\r\n            winningSquares: [],\r\n            squareClassNames: [],\r\n        }\r\n    }\r\n\r\n    calculateWinner(squares) {\r\n        const lines = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6],\r\n        ];\r\n        for(let i = 0; i < lines.length; i++) {\r\n            const [a, b, c] = lines[i];\r\n            if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n                //console.log(a + ', ' + b + ', ' + c);\r\n                this.state.winningSquares = [a, b, c];\r\n                return squares[a];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if(this.calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : '0';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    toggleMovesListOrder() {\r\n        this.setState({\r\n            showMovesListInReverse: !this.state.showMovesListInReverse,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n\r\n    buildMovesList() {\r\n        const moveCoordinates = ['(1,1)', '(2,1)', '(3,1)', '(1,2)', '(2,2)', '(3,2)', '(1,3)', '(2,3)', '(3,3)'];\r\n        const history = this.state.history;\r\n        let moves = [];\r\n        history.map((step, move) => {\r\n            let movePosition = '';\r\n            if(move) { //if not the start\r\n                for(var x = 0; x < history[move].squares.length; x++) {\r\n                    if(history[move].squares[x] != history[move - 1].squares[x]) {\r\n                        //console.log('difference index is ' + moveCoordinates[x]);\r\n                        movePosition = moveCoordinates[x];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            let buttonClass = '';\r\n            if(this.state.stepNumber == move) {\r\n                buttonClass = 'bold';\r\n            }\r\n            const desc = move ? 'Go to move #' + move + ' ' + movePosition : 'Go to game start';\r\n            moves.push(\r\n                <li key={move}>\r\n                    <button className={buttonClass} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>\r\n            );\r\n        });\r\n        return this.state.showMovesListInReverse ? moves.reverse() : moves;\r\n    }\r\n\r\n    render() {\r\n        //const moves = history.map((step, move) => {\r\n        //    let movePosition = '';\r\n        //    if(move) { //if not the start\r\n        //        //console.log('move = ' + move);\r\n        //        //console.log('this.state.stepNumber = ' + this.state.stepNumber);\r\n        //        //console.log(history[move].squares);\r\n        //        //console.log(history[move-1].squares);\r\n        //        for(var x=0; x<history[move].squares.length; x++) {\r\n        //            if(history[move].squares[x] != history[move-1].squares[x]) {\r\n        //                //console.log('difference index is ' + moveCoordinates[x]);\r\n        //                movePosition = moveCoordinates[x];\r\n        //                break;\r\n        //            }\r\n        //        }\r\n        //    }\r\n        //    console.log('this.state.stepNumber = ' + this.state.stepNumber);\r\n        //    console.log('move = ' + move);\r\n        //    let buttonClass = '';\r\n        //    if(this.state.stepNumber == move) {\r\n        //        buttonClass = 'bold';\r\n        //    }\r\n        //    const desc = move ? 'Go to move #' + move + ' ' + movePosition : 'Go to game start';\r\n        //    return (\r\n        //        <li key={move}>\r\n        //            <button className={buttonClass} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        //        </li>\r\n        //    );\r\n        //});\r\n\r\n        const moves = this.buildMovesList();\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = this.calculateWinner(current.squares);\r\n        const movesListToggle = <button onClick={() => this.toggleMovesListOrder()}>Toggle moves list order</button>;\r\n        this.state.squareClassNames = ['square', 'square', 'square', 'square', 'square', 'square', 'square', 'square', 'square']; //reset each render\r\n        const squareClassNames = this.state.squareClassNames;\r\n\r\n        console.log(this.state.stepNumber);\r\n\r\n        let status;\r\n        if(winner) {\r\n            status = 'Winner: ' + winner;\r\n            //console.log(this.state.winningSquares);\r\n            for(let i = 0; i < 3; i++) {\r\n                squareClassNames[this.state.winningSquares[i]] = 'square highlighted';\r\n            }\r\n        } else if(this.state.stepNumber == 9) {\r\n            status = 'Draw';\r\n        }\r\n        else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : '0');\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                        squareClassNames={squareClassNames}\r\n                        />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n                <div className=\"movesListToggle\">\r\n                    {movesListToggle}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}